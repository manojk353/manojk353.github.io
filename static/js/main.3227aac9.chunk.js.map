{"version":3,"sources":["body/MenuCards.js","body/Body.js","footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","maxWidth","media","height","paddingTop","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","avatar","backgroundColor","red","MenuCards","props","classes","React","useState","expanded","setExpanded","Card","className","CardHeader","Avatar","aria-label","menu","name","toString","charAt","toUpperCase","action","IconButton","title","subheader","price","CardMedia","image","CardContent","Typography","variant","color","component","description","CardActions","disableSpacing","clsx","onClick","aria-expanded","Body","GridList","cols","cellHeight","recepies","map","tile","GridListTile","key","id","Footer","App","setRecepies","loading","setLoading","LoadingFunction","Spinner","animation","ActualPage","useEffect","fetch","then","res","json","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3227aac9.chunk.js","sourcesContent":["import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { red } from '@material-ui/core/colors';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        maxWidth: 345,\r\n    },\r\n    media: {\r\n        height: 0,\r\n        paddingTop: '56.25%', // 16:9\r\n    },\r\n    expand: {\r\n        transform: 'rotate(0deg)',\r\n        marginLeft: 'auto',\r\n        transition: theme.transitions.create('transform', {\r\n            duration: theme.transitions.duration.shortest,\r\n        }),\r\n    },\r\n    expandOpen: {\r\n        transform: 'rotate(0deg)',\r\n    },\r\n    avatar: {\r\n        backgroundColor: red[500],\r\n    },\r\n}));\r\n\r\nfunction MenuCards(props) {\r\n\r\n    const classes = useStyles();\r\n    const [expanded, setExpanded] = React.useState(false);\r\n\r\n    const handleExpandClick = () => {\r\n        setExpanded(!expanded);\r\n    };\r\n\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardHeader\r\n                avatar={\r\n                    <Avatar aria-label=\"recipe\" className={classes.avatar}>\r\n                        {props.menu.name.toString().charAt(0).toUpperCase()}\r\n          </Avatar>\r\n                }\r\n                action={\r\n                    <IconButton aria-label=\"settings\">\r\n                        <MoreVertIcon />\r\n                    </IconButton>\r\n                }\r\n                title={props.menu.name}\r\n                subheader={\"$\"+props.menu.price}\r\n            />\r\n            <CardMedia\r\n                className={classes.media}\r\n                image={props.menu.image}\r\n                title={props.menu.name}\r\n            />\r\n            <CardContent>\r\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                {props.menu.description}\r\n        </Typography>\r\n            </CardContent>\r\n            <CardActions disableSpacing>\r\n                <IconButton aria-label=\"add to favorites\">\r\n                    <FavoriteIcon />\r\n                </IconButton>\r\n                <IconButton aria-label=\"share\">\r\n                    <ShareIcon />\r\n                </IconButton>\r\n                <IconButton\r\n                    className={clsx(classes.expand, {\r\n                        [classes.expandOpen]: expanded,\r\n                    })}\r\n                    onClick={handleExpandClick}\r\n                    aria-expanded={expanded}\r\n                    aria-label=\"show more\"\r\n                >\r\n                    <ShoppingCartIcon />\r\n                </IconButton>\r\n            </CardActions>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default MenuCards\r\n","import React from 'react'\r\nimport \"./Body.css\"\r\nimport MenuCards from './MenuCards';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\n\r\n\r\nfunction Body(props) {\r\n    return (\r\n        <div className=\"body\">\r\n            <div className=\"root\">\r\n                <GridList cols={3} cellHeight={450} className=\"gridList\">\r\n                    {props.recepies.map((tile) => (\r\n                        <GridListTile key={tile.id}>\r\n                            <MenuCards menu={tile}></MenuCards>\r\n                        </GridListTile>\r\n                    ))}\r\n                </GridList>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Body;\r\n","import React from 'react'\r\nimport \"./Footer.css\"\r\nfunction Footer() {\r\n    return (\r\n        <div className=\"footer\">\r\n            <p>Â© 2020 Copyright Free Recepie  </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Body from './body/Body';\nimport Footer from './footer/Footer';\nimport Spinner from 'react-bootstrap/Spinner'\n\n\nfunction App() {\n  const [recepies, setRecepies] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  const LoadingFunction = () => {\n    return (\n      <div className=\"loader\">\n        <Spinner animation=\"grow\" variant=\"primary\" />\n        <Spinner animation=\"grow\" variant=\"secondary\" />\n        <Spinner animation=\"grow\" variant=\"success\" />\n        <Spinner animation=\"grow\" variant=\"danger\" />\n        <Spinner animation=\"grow\" variant=\"warning\" />\n        <Spinner animation=\"grow\" variant=\"info\" />\n        <Spinner animation=\"grow\" variant=\"dark\" />\n      </div>\n    )\n  }\n\n  const ActualPage = () => {\n    return (\n      <div>\n        {/* header */}\n        <header className=\"App-header\">\n          <h3>FREE RECIPE</h3>\n        </header>\n        {/* body */}\n        <Body recepies={recepies} />\n        {/* footer */}\n        <Footer />\n      </div>\n    )\n  }\n\n  useEffect(() => {\n    fetch(`http://starlord.hackerearth.com/recipe`)\n      .then(res => {\n        return res.json();\n      }).then(res => {\n        setRecepies(res);\n        setLoading(false);\n      })\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {loading ? <LoadingFunction /> : <ActualPage />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}